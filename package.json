{
  "name": "com.unity.logging",
  "displayName": "Unity Logging",
  "version": "1.1.0-exp.1",
  "unity": "2022.3",
  "unityRelease": "0f1",
  "dependencies": {
    "com.unity.burst": "1.8.8",
    "com.unity.collections": "2.3.0-exp.1"
  },
  "relatedPackages": {
    "com.unity.logging.tests": "1.0.0"
  },
  "description": "The Logging package provides interfaces for creating and processing runtime events and logging output.",
  "keywords": [
    "dots",
    "logging",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* When using `RedirectUnityLogs`, native logs (logs emitted from C++ code in Unity) will now also be redirected. Note that this is only available in player builds as a current limitation prevents this redirection from working in the editor. Redirection of logs emitted by C# code remains supported both in player builds and in the editor, however.\n\n### Fixed\n\n* Under stress, it was possible to drop a log message.\n* Allow empty strings in logging messages\n* Performance issue with `LogControllerWrapper.GetLogControllerIndexUnderLockNoThrow` when creating many worlds.\n* Log sinks forwarded to UnityDebugLogSink will now no longer extract erroneous stacktraces from UnityDebugLogSink.cs. While it does not correctly forward stacktraces (if enabled), it at least doesn't report incorrect ones.\n* Fixed an issue where OutputTemplate is ignored when logging into UnityEditorConsole."
  },
  "upmCi": {
    "footprint": "1757a0cdd4b4600c51e3e9e845dcc01d9aae8028"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.logging@1.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "c3274ed2015eeec85914d62bfbd32e39f0dd112b"
  },
  "samples": [
    {
      "displayName": "Logging Sample",
      "description": "Simple Sample using a system to initialize and use logging",
      "path": "Samples~/LoggingSample"
    }
  ]
}
